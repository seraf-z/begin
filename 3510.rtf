{\rtf1\ansi\ansicpg1251\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 3510\
\uc0\u1053 \u1072  \u1074 \u1093 \u1086 \u1076 \u1077  \u1076 \u1074 \u1072  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072 :\
const arr1 = [1, 2, 3, 4, 5]\
const arr2 = [1, 5, 6, 7]\
\uc0\u1053 \u1091 \u1078 \u1085 \u1086  \u1085 \u1072 \u1087 \u1080 \u1089 \u1072 \u1090 \u1100  \u1092 \u1091 \u1085 \u1082 \u1094 \u1080 \u1102 , \u1082 \u1086 \u1090 \u1086 \u1088 \u1072 \u1103  \u1074 \u1086 \u1079 \u1074 \u1088 \u1072 \u1097 \u1072 \u1077 \u1090  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074  \u1089  \u1095 \u1080 \u1089 \u1083 \u1072 \u1084 \u1080  \u1080 \u1079  \u1087 \u1077 \u1088 \u1077 \u1076 \u1072 \u1085 \u1085 \u1099 \u1093  \u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1086 \u1074  \u1073 \u1077 \u1079  \u1076 \u1091 \u1073 \u1083 \u1080 \u1082 \u1072 \u1090 \u1086 \u1074 :\
f(arr1, arr2) => [1, 2, 3, 4, 5, 6, 7]\
\
\
\
\
\
\
\pard\pardeftab720\sl300\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
function concAndClean (a, b) \{\
  var c = a.concat(b); \
  for (var j = 0; j < c.length; j++)\{\
    for (var i = 1 + j; i < c.length; i++) \{\
      while ( c[j] == c[i] ) \{\
        c.splice(i, 1);\
      \}\
    \}\
  \}\
  return c;\
\}  \
\
const arr1 = [1,2,3,4,5];\
const arr2 = [1,5,6,7];  \
\
var newArr =  concAndClean (arr1, arr2);\
  }